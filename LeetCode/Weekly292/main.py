class Solution:
    def hasValidPath(self, grid):
        R, C = len(grid), len(grid[0])
        dp = [[[False for i in range(R+C+1)] for c in range(C+1)] for r in range(R+1)]
        dp[R][C-1][0] = True
        dp[R-1][C][0] = True
        for r in range(R-1, -1, -1):
            for c in range(C-1, -1, -1):
                for i in range(R+C):
                    nxt = [1,-1][grid[r][c] == ")"]
                    dp[r][c][i] = dp[r+1][c][i+nxt] or dp[r][c+1][i+nxt]
        return dp[0][0][0]


l = [['(','(','(','(','(',')',')','(',')',')','(',')',')','(',')','(','(',')',')','(',')','(',')',')','(',')',')',')',')','(',')','(','('],                                 ['(',')',')','(','(',')',')',')',')','(',')','(',')','(',')','(','(',')',')','(','(','(','(',')',')',')',')',')','(','(',')','(','('],                                 [')',')','(','(',')',')',')',')','(',')','(',')',')',')','(','(',')','(',')','(','(','(',')',')',')',')',')',')',')',')',')','(','('],
     ['(','(','(',')','(',')',')',')','(',')','(','(','(',')','(',')','(',')','(',')','(',')','(',')',')',')','(','(',')','(',')',')',')'],
     [')','(',')','(',')',')',')',')','(','(','(','(',')','(',')','(','(','(','(','(',')','(','(',')',')','(','(','(',')','(',')',')','('],
     [')',')',')','(',')',')',')','(','(',')',')','(','(','(','(',')','(','(',')',')','(',')',')',')','(',')',')','(',')',')','(','(','('],
     [')','(',')','(','(',')',')','(',')',')',')','(','(','(',')','(','(','(',')','(',')','(',')',')',')',')',')','(',')',')','(','(',')'],
     ['(','(',')',')','(',')',')','(','(','(','(',')','(',')','(','(','(','(','(','(',')','(',')','(',')',')','(','(','(',')','(','(',')'],
     [')',')','(','(',')',')','(','(','(','(','(','(','(',')',')','(','(','(',')',')','(',')','(','(',')',')','(',')',')','(',')','(','('],
     [')',')',')',')','(',')',')','(','(','(','(',')',')',')','(',')',')',')',')',')',')','(','(','(','(',')',')',')',')','(','(','(',')']]
print(Solution().hasValidPath(l))


print([1,-1][True])